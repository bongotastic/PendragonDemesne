from typing import List, Any
from pendragonDemesneRandomGeneration import nDX


class Infrastructure:
    def __init__(self):
        # Kind of infrastructure {de-facto, Investment, Enhancement}
        self.kindOf = "Asset"

        # State of operation {Nominal, damaged, destroyed}
        self.status = "Nominal"

        # Properties
        self.buildCost = 0

        self.incomeBase = 0
        self.incomeDie = 6
        self.incomeNumberOfDice = 0

        self.maintenanceBase = 0
        self.maintenanceDie = 6
        self.maintananceNumberOfDice = 0

        self.gloryAnnual = 0
        self.gloryOneTime = 0

        self.rollAnnual = []
        self.checkAnnual = []

    def GenerateIncome(self):
        """
        General purpose generation of an income
        :return: A value in libra
        """
        if self.incomeDie != 0:
            return nDX(self.incomeNumberOfDice, self.incomeDie, self.incomeBase)
        return self.incomeBase

    def GenerateMaintenance(self):
        """
        General purpose generation of a maintenance cost
        :return:
        """
        if self.maintenanceDie != 0:
            return nDX(self.maintananceNumberOfDice, self.maintenanceDie, self.maintenanceBase)
        return self.maintenanceBase


class DemesneYear:
    def __init__(self, demesne, year):
        self.year = year
        self.demesne = demesne

        self.assisedRent = 0
        self.income = 0
        self.expenses = 0
        self.misfortune = 0
        self.harvestResult = ""
        self.emergencyIncome = 0

        self.maintenanceLevel = ""

        self.storyElements = []

    def SetAssizedRent(self, rent):
        self.assisedRent = rent

    def SetIncome(self, income):
        self.income = income

    def GenerateMisfortune(self):
        self.misfortune = nDX(3,6,5)

    def AdjustFate(self, delta):
        self.misfortune += delta

    def AddExpenses(self, cost):
        self.expenses += cost

class Demesne:
    infrastructures: List[Infrastructure]
    #deJureTo: Demesne

    def __init__(self):
        # Name of property as used by landowner
        self.name = 'Default Name'

        # Parent property
        self.deJureTo = None

        # List of infrastructure
        self.infrastructures = []

    def GenerateIncome(self):
        """
        Sum all incomes generated by the infrastructure
        :return: An amount in libra
        """
        income = 0
        for item in self.infrastructures:
            income += item.GenerateIncome()
        return income

    def GenerateMaintenanceCost(self):
        """
        Sum all maintenance costs for the infrastructures
        :return: An amount in libra
        """
        maintenanceCost = 0
        for item in self.infrastructures:
            maintenanceCost += item.GenerateMaintenance()
        return maintenanceCost